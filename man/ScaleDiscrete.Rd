% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale-discrete.R
\docType{data}
\name{ScaleDiscrete}
\alias{ScaleDiscrete}
\title{Discrete Scale}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
ScaleDiscrete
}
\description{
Discrete Scale
}
\section{ScaleDiscrete inheritance}{
 ScaleDiscrete inherits from \code{\link{ScaleSimple}}, \code{\link{Scale}}
}

\section{ScaleDiscrete R6 Methods}{


\code{scale_discrete$is_empty()} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Returns \code{TRUE} if the scale has \code{$limits()} (or can calculate them).
}

\code{scale_discrete$breaks()} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Calculates and returns breaks in transformed data space. This can be a function of the \code{$limits()} and by default the \code{$breaks()} method of the transform is used. For continuous scales this is usually \code{\link[labeling:extended]{labeling::extended()}}, and for discrete scales the default is to return the limits unchanged.
}

\code{scale_discrete$breaks_minor()} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Calculates and returns minor breaks in transformed data space. This can be a function of the \code{$breaks()}, \code{$limits()}, and number of intervals between breaks (usually 2). Minor breaks usually don't make sense for discrete scales.
}

\code{scale_discrete$labels()} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Calculates and returns the labels associated with the \code{$breaks()}. This can be a function of the \code{$breaks()}, and by default the \code{$format()} method of the transform is used.
}

\code{scale_discrete$limits()} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Calculates and returns the limits. This can be a funnction of the \code{$trained_range()}, and defaults to returning the \code{$trained_range()}. Continuous limits are always a numeric vector of length 2; discrete limits are usually a character vector containing possible values.
}

\code{scale_discrete$trained_range()} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item The range of the values in transformed data space that were observed for this scale's aesthetics. Contiuous ranges are always \code{NULL} (when no values were observed) or a numeric vector of length 2; discrete ranges are usually a character vector of values that were observed in the data.
}

\code{scale_discrete$set_breaks(breaks)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the breaks for this scale. Can be a vector of breaks in user data space or a function of the \code{$limits()}.
}

\code{scale_discrete$set_breaks_minor(breaks_minor)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the minor breaks for this scale. Can be a vector of breaks in user data space or a function of the \code{$breaks()}, \code{$limits()}, and the number 2.
}

\code{scale_discrete$set_labels(labels)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the labels for this scale. Can be a vector of labels or a function of the \code{$breaks()}.
}

\code{scale_discrete$set_limits(limits)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the limits for this scale. Can be a function of the \code{$trained_range()} or a vector (length 2 numeric for continuous scales or a character vector for discrete scales).
}

\code{scale_discrete$set_oob(oob)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the out-of-bounds function for this scale. The out-of-bounds function is a function of a vector and the \code{$limits()}; useful oob functions include \code{\link[=oob_keep]{oob_keep()}} (which does nothing; the default), \code{\link[scales:censor]{scales::censor()}} (which sets values outside the limits to \code{NA}) and \code{\link[scales:squish]{scales::squish()}} (which sets values outside the limits to the outermost values), and \code{\link[=censor_discrete]{censor_discrete()}} (which works like \code{\link[scales:censor]{scales::censor()}} but works for discrete scales).
}

\code{scale_discrete$set_range(range)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the range class for this scale. This must be a subclass of \link[scales:Range]{scales::Range}.
}

\code{scale_discrete$set_rescaler(rescaler)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the rescaler function for this scale. Rescaled values (between 0 and 1) are often useful as inputs to continuous palletes. This function should take a keyword argument \code{from}, which is the scale \code{$limits()}. The most useful values for \code{rescaler} are \code{\link[=rescale_none]{rescale_none()}} (the default) and \code{\link[scales:rescale]{scales::rescale()}}.
}

\code{scale_discrete$set_trans(trans)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the transform for this scale. See \code{\link[scales:trans_new]{scales::trans_new()}} for a list of transforms for continuous scales. For discrete scales, the default value of \code{\link[=discrete_identity_trans]{discrete_identity_trans()}} is probably the only value that makes sense.
}

\code{scale_discrete$set_na_value(na_value)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the output (mapped data space) value that will represent \code{NA} values for this scale.
}

\code{scale_discrete$set_limits_empty(limits_empty)} (inherited from \code{\link{ScaleSimple}})
\itemize{
\item Set the limits to return (in transformed data space) when \code{$is_empty()} returns \code{TRUE}.
}

\code{scale_discrete$name(x)} (inherited from \code{\link{Scale}})
\itemize{
\item Calculate the scale name, which should be a character vector of length 1. May return \code{\link[=waiver]{waiver()}} for when the scale name should be calculated from the \code{\link{ColumnMapping}}. This method may be removed in favour of this value living in the \link{Guide}.
}

\code{scale_discrete$map(x)} (inherited from \code{\link{Scale}})
\itemize{
\item Convert the transformed-date vector \code{x} into mapped data space. This may be a numeric value (for position scales) or some other vector type (e.g., for colour scales). Usually called by \code{$map_tbl()}.
}

\code{scale_discrete$within_limits(x)} (inherited from \code{\link{Scale}})
\itemize{
\item Returns a logical vector describing whether or not values in the transformed-data vector \code{x} are within the scale \code{$limits()}.
}

\code{scale_discrete$set_guide(guide)} (inherited from \code{\link{Scale}})
\itemize{
\item Set the \link{Guide} that will be used to communicate the relationship between user data values and mapped data values.
}
}

\keyword{datasets}
