% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cascading-theme.R
\name{cascade}
\alias{cascade}
\alias{cascade.default}
\alias{cascade.function}
\alias{cascade.quosure}
\alias{cascade.formula}
\alias{reverse_cascade}
\alias{reverse_cascade.default}
\alias{reverse_cascade.function}
\alias{reverse_cascade.quosure}
\alias{reverse_cascade.formula}
\alias{reverse_cascade.cascading_element}
\title{Combine cascading elements}
\usage{
cascade(parent, child = missing_value(), cascading_theme = NULL)

\method{cascade}{default}(parent, child = missing_value(), cascading_theme = NULL)

\method{cascade}{`function`}(parent, child = missing_value(), cascading_theme = NULL)

\method{cascade}{quosure}(parent, child = missing_value(), cascading_theme = NULL)

\method{cascade}{formula}(parent, child = missing_value(), cascading_theme = NULL)

reverse_cascade(child, parent = missing_value(), cascading_theme = NULL)

\method{reverse_cascade}{default}(child, parent = missing_value(), cascading_theme = NULL)

\method{reverse_cascade}{`function`}(child, parent = missing_value(), cascading_theme = NULL)

\method{reverse_cascade}{quosure}(child, parent = missing_value(), cascading_theme = NULL)

\method{reverse_cascade}{formula}(child, parent = missing_value(), cascading_theme = NULL)

\method{reverse_cascade}{cascading_element}(child, parent = missing_value(), cascading_theme = NULL)
}
\arguments{
\item{parent}{The value to be inherited from}

\item{child}{The value to inherit}

\item{cascading_theme}{The \link{CascadingTheme} object from which \code{\link[=cascade]{cascade()}}
is called.}
}
\description{
Combines two values. For most values, \code{child} is returned in place
of \code{parent}. Exeptions are formulas (converted to quosures
and evaluated with the object \code{parent} and objects from the
\link{CascadingTheme}'s \code{data} field available), functions (evaluated
on the \code{parent} if there is one), and \code{\link[=cascading_element]{cascading_element()}}s (values
are merged recursively). Use \code{\link[rlang:as_box]{rlang::as_box()}} to cascade items
without applying any class-based rules, and \code{\link[rlang:zap]{rlang::zap()}} to
remove a key from the parent \code{\link[=cascading_element]{cascading_element()}}.
}
\examples{
# in most cases, child is returned in place parent
cascade("parent value", "child value")

# formulas/quosures can use `parent` (tidy evaluation is supported)
# and data supplied by the theme
cascade(
  "parent value",
  ~paste(parent, "child value", sep = separator),
  CascadingTheme$new(data = list(separator = "=>"))
)

# items of cascading elements are merged recursively using the
# same rules
cascade(
  cascading_element(key1 = "parent value 1", key2 = "parent_value 2"),
  cascading_element(
    key1 = "child value 1",
    key2 = ~paste(parent, "child value2", sep = separator)
  ),
  CascadingTheme$new(data = list(separator = "=>"))
)

}
