% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale-simple.R
\name{ScaleSimple}
\alias{ScaleSimple}
\title{Default implementation of Scale objects}
\description{
Most useful scales will inherit from \link{ScaleContinuous} or
\link{ScaleDiscrete}, both of which use the \link[scales:scales]{scales}
package to create meaningful mappings between user data and
aesthetics with useful breaks and labels.
}
\section{Super class}{
\code{\link[ggr6:Scale]{ggr6::Scale}} -> \code{ScaleSimple}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ScaleSimple$new()}}
\item \href{#method-is_empty}{\code{ScaleSimple$is_empty()}}
\item \href{#method-transform}{\code{ScaleSimple$transform()}}
\item \href{#method-untransform}{\code{ScaleSimple$untransform()}}
\item \href{#method-transform_tbl}{\code{ScaleSimple$transform_tbl()}}
\item \href{#method-untransform_tbl}{\code{ScaleSimple$untransform_tbl()}}
\item \href{#method-train}{\code{ScaleSimple$train()}}
\item \href{#method-train_tbl}{\code{ScaleSimple$train_tbl()}}
\item \href{#method-reset}{\code{ScaleSimple$reset()}}
\item \href{#method-map_tbl}{\code{ScaleSimple$map_tbl()}}
\item \href{#method-breaks}{\code{ScaleSimple$breaks()}}
\item \href{#method-breaks_minor}{\code{ScaleSimple$breaks_minor()}}
\item \href{#method-labels}{\code{ScaleSimple$labels()}}
\item \href{#method-limits}{\code{ScaleSimple$limits()}}
\item \href{#method-trained_range}{\code{ScaleSimple$trained_range()}}
\item \href{#method-set_breaks}{\code{ScaleSimple$set_breaks()}}
\item \href{#method-set_breaks_minor}{\code{ScaleSimple$set_breaks_minor()}}
\item \href{#method-set_labels}{\code{ScaleSimple$set_labels()}}
\item \href{#method-set_limits}{\code{ScaleSimple$set_limits()}}
\item \href{#method-set_oob}{\code{ScaleSimple$set_oob()}}
\item \href{#method-set_range}{\code{ScaleSimple$set_range()}}
\item \href{#method-set_rescaler}{\code{ScaleSimple$set_rescaler()}}
\item \href{#method-set_trans}{\code{ScaleSimple$set_trans()}}
\item \href{#method-set_na_value}{\code{ScaleSimple$set_na_value()}}
\item \href{#method-set_limits_empty}{\code{ScaleSimple$set_limits_empty()}}
\item \href{#method-clone}{\code{ScaleSimple$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="ggr6" data-topic="Scale" data-id="map">}\href{../../ggr6/html/Scale.html#method-map}{\code{ggr6::Scale$map()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ggr6" data-topic="Scale" data-id="name">}\href{../../ggr6/html/Scale.html#method-name}{\code{ggr6::Scale$name()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ggr6" data-topic="Scale" data-id="set_guide">}\href{../../ggr6/html/Scale.html#method-set_guide}{\code{ggr6::Scale$set_guide()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ggr6" data-topic="Scale" data-id="within_limits">}\href{../../ggr6/html/Scale.html#method-within_limits}{\code{ggr6::Scale$within_limits()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$new(aesthetics = character(0))}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_empty"></a>}}
\subsection{Method \code{is_empty()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$is_empty()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Returns \code{TRUE} if the scale has \verb{$limits()} (or can calculate them).
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transform"></a>}}
\subsection{Method \code{transform()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$transform(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-untransform"></a>}}
\subsection{Method \code{untransform()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$untransform(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transform_tbl"></a>}}
\subsection{Method \code{transform_tbl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$transform_tbl(data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-untransform_tbl"></a>}}
\subsection{Method \code{untransform_tbl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$untransform_tbl(data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-train"></a>}}
\subsection{Method \code{train()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$train(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-train_tbl"></a>}}
\subsection{Method \code{train_tbl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$train_tbl(data_trans)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reset"></a>}}
\subsection{Method \code{reset()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$reset()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-map_tbl"></a>}}
\subsection{Method \code{map_tbl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$map_tbl(data_trans)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-breaks"></a>}}
\subsection{Method \code{breaks()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$breaks()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-breaks_minor"></a>}}
\subsection{Method \code{breaks_minor()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$breaks_minor()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Calculates and returns minor breaks in transformed data space. This can
be a function of the \verb{$breaks()}, \verb{$limits()}, and number of intervals
between breaks (usually 2). Minor breaks usually don't make sense for
discrete scales.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-labels"></a>}}
\subsection{Method \code{labels()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$labels()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Calculates and returns the labels associated with the \verb{$breaks()}. This
can be a function of the \verb{$breaks()}, and by default the \verb{$format()} method
of the transform is used.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-limits"></a>}}
\subsection{Method \code{limits()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$limits()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Calculates and returns the limits. This can be a funnction of the
\verb{$trained_range()}, and defaults to returning the \verb{$trained_range()}.
Continuous limits are always a numeric vector of length 2; discrete limits
are usually a character vector containing possible values.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-trained_range"></a>}}
\subsection{Method \code{trained_range()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$trained_range()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The range of the values in transformed data space that were observed
for this scale's aesthetics. Contiuous ranges are always \code{NULL} (when no
values were observed) or a numeric vector of length 2; discrete ranges
are usually a character vector of values that were observed in the data.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_breaks"></a>}}
\subsection{Method \code{set_breaks()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_breaks(breaks)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the breaks for this scale. Can be a vector of breaks in user data space
or a function of the \verb{$limits()}.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_breaks_minor"></a>}}
\subsection{Method \code{set_breaks_minor()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_breaks_minor(breaks_minor)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the minor breaks for this scale. Can be a vector of breaks in user data space
or a function of the \verb{$breaks()}, \verb{$limits()}, and the number 2.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_labels"></a>}}
\subsection{Method \code{set_labels()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_labels(labels)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the labels for this scale. Can be a vector of labels or a function of
the \verb{$breaks()}.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_limits"></a>}}
\subsection{Method \code{set_limits()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_limits(limits)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the limits for this scale. Can be a function of the \verb{$trained_range()} or
a vector (length 2 numeric for continuous scales or a character vector for
discrete scales).
@details
Set the out-of-bounds function for this scale. The out-of-bounds function
is a function of a vector and the \verb{$limits()}; useful oob functions include
\code{\link[=oob_keep]{oob_keep()}} (which does nothing; the default),
\code{\link[scales:censor]{scales::censor()}} (which sets values outside the limits to \code{NA}) and
\code{\link[scales:squish]{scales::squish()}} (which sets values outside the limits to the outermost values),
and \code{\link[=censor_discrete]{censor_discrete()}} (which works like \code{\link[scales:censor]{scales::censor()}} but works for
discrete scales).
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_oob"></a>}}
\subsection{Method \code{set_oob()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_oob(oob)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_range"></a>}}
\subsection{Method \code{set_range()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_range(range)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the range class for this scale. This must be a subclass of
\link[scales:Range]{scales::Range}.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_rescaler"></a>}}
\subsection{Method \code{set_rescaler()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_rescaler(rescaler)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the rescaler function for this scale. Rescaled values (between 0 and 1)
are often useful as inputs to continuous palletes. This function should take
a keyword argument \code{from}, which is the scale \verb{$limits()}. The most useful
values for \code{rescaler} are \code{\link[=rescale_none]{rescale_none()}} (the default) and \code{\link[scales:rescale]{scales::rescale()}}.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_trans"></a>}}
\subsection{Method \code{set_trans()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_trans(trans)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the transform for this scale. See \code{\link[scales:trans_new]{scales::trans_new()}} for a list
of transforms for continuous scales. For discrete scales, the default
value of \code{\link[=discrete_identity_trans]{discrete_identity_trans()}} is probably the only value that makes
sense.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_na_value"></a>}}
\subsection{Method \code{set_na_value()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_na_value(na_value)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the output (mapped data space) value that will represent \code{NA} values
for this scale.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_limits_empty"></a>}}
\subsection{Method \code{set_limits_empty()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$set_limits_empty(limits_empty)}\if{html}{\out{</div>}}
}

\subsection{Details}{
Set the limits to return (in transformed data space) when \verb{$is_empty()}
returns \code{TRUE}.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleSimple$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
